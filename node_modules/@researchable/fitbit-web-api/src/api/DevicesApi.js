/**
 * Fitbit Web API
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/oauth2/#obtaining-consent.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FitbitWebApi) {
      root.FitbitWebApi = {};
    }
    root.FitbitWebApi.DevicesApi = factory(root.FitbitWebApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Devices service.
   * @module api/DevicesApi
   * @version 1
   */

  /**
   * Constructs a new DevicesApi. 
   * @alias module:api/DevicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addAlarms operation.
     * @callback module:api/DevicesApi~addAlarmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Alarm
     * Adds the alarm settings to a given ID for a given device.
     * @param {Number} trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @param {String} time Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
     * @param {Boolean} enabled true or false. If false, alarm does not vibrate until enabled is set to true.
     * @param {String} recurring true or false. If false, the alarm is a single event.
     * @param {String} weekDays Comma separated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
     * @param {module:api/DevicesApi~addAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addAlarms = function(trackerId, time, enabled, recurring, weekDays, callback) {
      var postBody = null;

      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling addAlarms");
      }

      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling addAlarms");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling addAlarms");
      }

      // verify the required parameter 'recurring' is set
      if (recurring === undefined || recurring === null) {
        throw new Error("Missing the required parameter 'recurring' when calling addAlarms");
      }

      // verify the required parameter 'weekDays' is set
      if (weekDays === undefined || weekDays === null) {
        throw new Error("Missing the required parameter 'weekDays' when calling addAlarms");
      }


      var pathParams = {
        'tracker-id': trackerId
      };
      var queryParams = {
        'time': time,
        'enabled': enabled,
        'recurring': recurring,
        'weekDays': weekDays,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/devices/tracker/{tracker-id}/alarms.json', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlarms operation.
     * @callback module:api/DevicesApi~deleteAlarmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Alarm
     * Deletes the user&#39;s device alarm entry with the given ID for a given device.
     * @param {Number} trackerId The ID of the tracker whose alarms is managed. The tracker-id value is found via the Get Devices endpoint.
     * @param {Number} alarmId The ID of the alarm to be updated. The alarm-id value is found via the Get Alarms endpoint.
     * @param {module:api/DevicesApi~deleteAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAlarms = function(trackerId, alarmId, callback) {
      var postBody = null;

      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling deleteAlarms");
      }

      // verify the required parameter 'alarmId' is set
      if (alarmId === undefined || alarmId === null) {
        throw new Error("Missing the required parameter 'alarmId' when calling deleteAlarms");
      }


      var pathParams = {
        'tracker-id': trackerId,
        'alarm-id': alarmId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlarms operation.
     * @callback module:api/DevicesApi~getAlarmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Alarms
     * Returns alarms for a device
     * @param {Number} trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @param {module:api/DevicesApi~getAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAlarms = function(trackerId, callback) {
      var postBody = null;

      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling getAlarms");
      }


      var pathParams = {
        'tracker-id': trackerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/devices/tracker/{tracker-id}/alarms.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDevices operation.
     * @callback module:api/DevicesApi~getDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Devices
     * Returns a list of the Fitbit devices connected to a user&#39;s account.
     * @param {module:api/DevicesApi~getDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDevices = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/devices.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAlarms operation.
     * @callback module:api/DevicesApi~updateAlarmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Alarm
     * Updates the alarm entry with a given ID for a given device. It also gets a response in the format requested.
     * @param {Number} trackerId The ID of the tracker for which data is returned. The tracker-id value is found via the Get Devices endpoint.
     * @param {Number} alarmId The ID of the alarm to be updated. The alarm-id value is found in the response of the Get Activity endpoint.
     * @param {String} time Time of day that the alarm vibrates with a UTC timezone offset, e.g. 07:15-08:00.
     * @param {Boolean} enabled true or false. If false, the alarm does not vibrate until enabled is set to true.
     * @param {String} recurring true or false. If false, the alarm is a single event.
     * @param {String} weekDays Comma seperated list of days of the week on which the alarm vibrates, e.g. MONDAY, TUESDAY.
     * @param {Number} snoozeLength Minutes between alarms.
     * @param {Number} snoozeCount Maximum snooze count.
     * @param {module:api/DevicesApi~updateAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAlarms = function(trackerId, alarmId, time, enabled, recurring, weekDays, snoozeLength, snoozeCount, callback) {
      var postBody = null;

      // verify the required parameter 'trackerId' is set
      if (trackerId === undefined || trackerId === null) {
        throw new Error("Missing the required parameter 'trackerId' when calling updateAlarms");
      }

      // verify the required parameter 'alarmId' is set
      if (alarmId === undefined || alarmId === null) {
        throw new Error("Missing the required parameter 'alarmId' when calling updateAlarms");
      }

      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling updateAlarms");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling updateAlarms");
      }

      // verify the required parameter 'recurring' is set
      if (recurring === undefined || recurring === null) {
        throw new Error("Missing the required parameter 'recurring' when calling updateAlarms");
      }

      // verify the required parameter 'weekDays' is set
      if (weekDays === undefined || weekDays === null) {
        throw new Error("Missing the required parameter 'weekDays' when calling updateAlarms");
      }

      // verify the required parameter 'snoozeLength' is set
      if (snoozeLength === undefined || snoozeLength === null) {
        throw new Error("Missing the required parameter 'snoozeLength' when calling updateAlarms");
      }

      // verify the required parameter 'snoozeCount' is set
      if (snoozeCount === undefined || snoozeCount === null) {
        throw new Error("Missing the required parameter 'snoozeCount' when calling updateAlarms");
      }


      var pathParams = {
        'tracker-id': trackerId,
        'alarm-id': alarmId
      };
      var queryParams = {
        'time': time,
        'enabled': enabled,
        'recurring': recurring,
        'weekDays': weekDays,
        'snoozeLength': snoozeLength,
        'snoozeCount': snoozeCount,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
