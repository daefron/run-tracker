/**
 * Fitbit Web API
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/oauth2/#obtaining-consent.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FitbitWebApi) {
      root.FitbitWebApi = {};
    }
    root.FitbitWebApi.HeartRateIntradayTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * HeartRateIntradayTimeSeries service.
   * @module api/HeartRateIntradayTimeSeriesApi
   * @version 1
   */

  /**
   * Constructs a new HeartRateIntradayTimeSeriesApi. 
   * @alias module:api/HeartRateIntradayTimeSeriesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getHeartByDateIntraday operation.
     * @callback module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateIntradayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Intraday Time Series
     * Returns the intraday time series for a given resource in the format requested. If your application has the appropriate access, your calls to a time series endpoint for a specific day (by using start and end dates on the same day or a period of 1d), the response will include extended intraday values with a one-minute detail level for that day. Unlike other time series calls that allow fetching data of other users, intraday data is available only for and to the authorized user.
     * @param {Date} _date The date in the format of yyyy-MM-dd or today.
     * @param {String} detailLevel The number of data points to include either 1sec or 1min.
     * @param {module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateIntradayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDateIntraday = function(_date, detailLevel, callback) {
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getHeartByDateIntraday");
      }

      // verify the required parameter 'detailLevel' is set
      if (detailLevel === undefined || detailLevel === null) {
        throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateIntraday");
      }


      var pathParams = {
        'date': _date,
        'detail-level': detailLevel
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{date}/1d/{detail-level}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeartByDateRangeIntraday operation.
     * @callback module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateRangeIntradayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Intraday Time Series
     * Returns the intraday time series for a given resource in the format requested. If your application has the appropriate access, your calls to a time series endpoint for a specific day (by using start and end dates on the same day or a period of 1d), the response will include extended intraday values with a one-minute detail level for that day. Unlike other time series calls that allow fetching data of other users, intraday data is available only for and to the authorized user.
     * @param {Date} _date The date in the format of yyyy-MM-dd or today.
     * @param {Date} endDate The end date in the format of yyyy-MM-dd or today.
     * @param {String} detailLevel The number of data points to include either 1sec or 1min.
     * @param {module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateRangeIntradayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDateRangeIntraday = function(_date, endDate, detailLevel, callback) {
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getHeartByDateRangeIntraday");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRangeIntraday");
      }

      // verify the required parameter 'detailLevel' is set
      if (detailLevel === undefined || detailLevel === null) {
        throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateRangeIntraday");
      }


      var pathParams = {
        'date': _date,
        'end-date': endDate,
        'detail-level': detailLevel
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{date}/{end-date}/{detail-level}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeartByDateRangeTimestampIntraday operation.
     * @callback module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateRangeTimestampIntradayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Intraday Time Series
     * Returns the intraday time series for a given resource in the format requested. If your application has the appropriate access, your calls to a time series endpoint for a specific day (by using start and end dates on the same day or a period of 1d), the response will include extended intraday values with a one-minute detail level for that day. Unlike other time series calls that allow fetching data of other users, intraday data is available only for and to the authorized user.
     * @param {Date} _date The date in the format of yyyy-MM-dd or today.
     * @param {Date} endDate The end date in the format of yyyy-MM-dd or today.
     * @param {String} detailLevel The number of data points to include either 1sec or 1min.
     * @param {String} startTime The start of the period in the format of HH:mm.
     * @param {String} endTime The end time of the period in the format of HH:mm.
     * @param {module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateRangeTimestampIntradayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDateRangeTimestampIntraday = function(_date, endDate, detailLevel, startTime, endTime, callback) {
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getHeartByDateRangeTimestampIntraday");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRangeTimestampIntraday");
      }

      // verify the required parameter 'detailLevel' is set
      if (detailLevel === undefined || detailLevel === null) {
        throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateRangeTimestampIntraday");
      }

      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getHeartByDateRangeTimestampIntraday");
      }

      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getHeartByDateRangeTimestampIntraday");
      }


      var pathParams = {
        'date': _date,
        'end-date': endDate,
        'detail-level': detailLevel,
        'start-time': startTime,
        'end-time': endTime
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{date}/{end-date}/{detail-level}/time/{start-time}/{end-time}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeartByDateTimestampIntraday operation.
     * @callback module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateTimestampIntradayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Intraday Time Series
     * Returns the intraday time series for a given resource in the format requested. If your application has the appropriate access, your calls to a time series endpoint for a specific day (by using start and end dates on the same day or a period of 1d), the response will include extended intraday values with a one-minute detail level for that day. Unlike other time series calls that allow fetching data of other users, intraday data is available only for and to the authorized user.
     * @param {Date} _date The date in the format of yyyy-MM-dd or today.
     * @param {String} detailLevel The number of data points to include either 1sec or 1min.
     * @param {String} startTime The start of the period in the format of HH:mm.
     * @param {String} endTime The end time of the period in the format of HH:mm.
     * @param {module:api/HeartRateIntradayTimeSeriesApi~getHeartByDateTimestampIntradayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDateTimestampIntraday = function(_date, detailLevel, startTime, endTime, callback) {
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getHeartByDateTimestampIntraday");
      }

      // verify the required parameter 'detailLevel' is set
      if (detailLevel === undefined || detailLevel === null) {
        throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateTimestampIntraday");
      }

      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getHeartByDateTimestampIntraday");
      }

      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getHeartByDateTimestampIntraday");
      }


      var pathParams = {
        'date': _date,
        'detail-level': detailLevel,
        'start-time': startTime,
        'end-time': endTime
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{date}/1d/{detail-level}/time/{start-time}/{end-time}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
