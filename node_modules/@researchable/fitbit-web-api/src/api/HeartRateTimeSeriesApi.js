/**
 * Fitbit Web API
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/oauth2/#obtaining-consent.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FitbitWebApi) {
      root.FitbitWebApi = {};
    }
    root.FitbitWebApi.HeartRateTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * HeartRateTimeSeries service.
   * @module api/HeartRateTimeSeriesApi
   * @version 1
   */

  /**
   * Constructs a new HeartRateTimeSeriesApi. 
   * @alias module:api/HeartRateTimeSeriesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getHeartByDatePeriod operation.
     * @callback module:api/HeartRateTimeSeriesApi~getHeartByDatePeriodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Time Series
     * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
     * @param {Date} _date The end date of the period specified in the format yyyy-MM-dd or today.
     * @param {String} period The range of which data will be returned. Options are 1d, 7d, 30d, 1w, and 1m.
     * @param {module:api/HeartRateTimeSeriesApi~getHeartByDatePeriodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDatePeriod = function(_date, period, callback) {
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling getHeartByDatePeriod");
      }

      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling getHeartByDatePeriod");
      }


      var pathParams = {
        'date': _date,
        'period': period
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{date}/{period}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeartByDateRange operation.
     * @callback module:api/HeartRateTimeSeriesApi~getHeartByDateRangeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heart Rate Time Series
     * Returns the time series data in the specified range for a given resource in the format requested using units in the unit systems that corresponds to the Accept-Language header provided.
     * @param {String} baseDate The range start date in  the format yyyy-MM-dd or today.
     * @param {Date} endDate The end date of the range.
     * @param {module:api/HeartRateTimeSeriesApi~getHeartByDateRangeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getHeartByDateRange = function(baseDate, endDate, callback) {
      var postBody = null;

      // verify the required parameter 'baseDate' is set
      if (baseDate === undefined || baseDate === null) {
        throw new Error("Missing the required parameter 'baseDate' when calling getHeartByDateRange");
      }

      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRange");
      }


      var pathParams = {
        'base-date': baseDate,
        'end-date': endDate
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1/user/-/activities/heart/date/{base-date}/{end-date}.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
