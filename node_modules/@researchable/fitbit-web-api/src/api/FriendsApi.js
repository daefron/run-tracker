/**
 * Fitbit Web API
 * Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/oauth2/#obtaining-consent.
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FitbitWebApi) {
      root.FitbitWebApi = {};
    }
    root.FitbitWebApi.FriendsApi = factory(root.FitbitWebApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Friends service.
   * @module api/FriendsApi
   * @version 1
   */

  /**
   * Constructs a new FriendsApi. 
   * @alias module:api/FriendsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createFriendsInvitations operation.
     * @callback module:api/FriendsApi~createFriendsInvitationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Friends
     * Creates an invitation to become friends with the authorized user.  Either invitedUserEmail or invitedUserId needs to be provided.
     * @param {Object} opts Optional parameters
     * @param {String} opts.invitedUserEmail Email of the user to invite.
     * @param {String} opts.invitedUserId Encoded ID of the user to invite.
     * @param {module:api/FriendsApi~createFriendsInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createFriendsInvitations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'invitedUserEmail': opts['invitedUserEmail'],
        'invitedUserId': opts['invitedUserId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1.1/user/-/friends/invitations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriends operation.
     * @callback module:api/FriendsApi~getFriendsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Friends
     * Returns data of a user&#39;s friends in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
     * @param {module:api/FriendsApi~getFriendsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFriends = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1.1/user/-/friends.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriendsInvitations operation.
     * @callback module:api/FriendsApi~getFriendsInvitationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Friend Invitations
     * Returns a list of invitations to become friends with a user in the format requested.
     * @param {module:api/FriendsApi~getFriendsInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFriendsInvitations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1.1/user/-/friends/invitations.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriendsLeaderboard operation.
     * @callback module:api/FriendsApi~getFriendsLeaderboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Friends Leaderboard
     * Returns data of a user&#39;s friends in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
     * @param {module:api/FriendsApi~getFriendsLeaderboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getFriendsLeaderboard = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1.1/user/-/leaderboard/friends.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the respondFriendsInvitation operation.
     * @callback module:api/FriendsApi~respondFriendsInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respond to Friend Invitation
     * Accepts or rejects an invitation to become friends wit inviting user.
     * @param {String} fromUserId The encoded ID of a user from which to accept or reject invitation.
     * @param {String} accept Accept or reject invitation; true or false.
     * @param {module:api/FriendsApi~respondFriendsInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.respondFriendsInvitation = function(fromUserId, accept, callback) {
      var postBody = null;

      // verify the required parameter 'fromUserId' is set
      if (fromUserId === undefined || fromUserId === null) {
        throw new Error("Missing the required parameter 'fromUserId' when calling respondFriendsInvitation");
      }

      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling respondFriendsInvitation");
      }


      var pathParams = {
        'from-user-id': fromUserId
      };
      var queryParams = {
        'accept': accept,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['text/plain'];
      var returnType = null;

      return this.apiClient.callApi(
        '/1.1/user/-/friends/invitations/{from-user-id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
