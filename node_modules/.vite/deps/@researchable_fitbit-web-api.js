import {
  __commonJS,
  __require
} from "./chunk-VUNV25KB.js";

// node_modules/component-emitter/index.js
var require_component_emitter = __commonJS({
  "node_modules/component-emitter/index.js"(exports, module) {
    if (typeof module !== "undefined") {
      module.exports = Emitter;
    }
    function Emitter(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event, on);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks) return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module) {
    "use strict";
    function isObject(obj) {
      return null !== obj && "object" === typeof obj;
    }
    module.exports = isObject;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    module.exports = RequestBase;
    function RequestBase(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function _clearTimeout() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function parse(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function serialize(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function timeout(options) {
      if (!options || "object" !== typeof options) {
        this._timeout = options;
        this._responseTimeout = 0;
        return this;
      }
      for (var option in options) {
        switch (option) {
          case "deadline":
            this._timeout = options.deadline;
            break;
          case "response":
            this._responseTimeout = options.response;
            break;
          default:
            console.warn("Unknown timeout option", option);
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function retry(count) {
      if (arguments.length === 0 || count === true) count = 1;
      if (count <= 0) count = 0;
      this._maxRetries = count;
      this._retries = 0;
      return this;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      return this._end();
    };
    RequestBase.prototype.then = function then(resolve, reject) {
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
          self2.end(function(err, res) {
            if (err) innerReject(err);
            else innerResolve(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function use(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if ("function" !== typeof cb) throw Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject(field)) {
        for (var key in field) {
          this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (null === name || void 0 === name) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject(name)) {
        for (var key in name) {
          this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          this.field(name, val[i]);
        }
        return this;
      }
      if (null === val || void 0 === val) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if ("boolean" === typeof val) {
        val = "" + val;
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      this.xhr && this.xhr.abort();
      this.req && this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on == void 0) on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if ("number" !== typeof n) {
        throw TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject(data);
      var type = this._header["content-type"];
      if (this._formData) {
        console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw Error("Can't merge these send calls");
      }
      if (isObj && isObject(this._data)) {
        for (var key in data) {
          this._data[key] = data[key];
        }
      } else if ("string" == typeof data) {
        if (!type) this.type("form");
        type = this._header["content-type"];
        if ("application/x-www-form-urlencoded" == type) {
          this._data = this._data ? this._data + "&" + data : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type) this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.substring(index + 1).split("&");
          if ("function" === typeof this._sort) {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.substring(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.trace("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error(reason + timeout + "ms exceeded");
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/superagent/lib/utils.js
var require_utils = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val) obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, shouldStripCookie) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header["host"];
      if (shouldStripCookie) {
        delete header["cookie"];
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params) this[key] = params[key];
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (err) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.status = this.statusCode = status;
      this.statusType = type;
      this.info = 1 == type;
      this.ok = 2 == type;
      this.redirect = 3 == type;
      this.clientError = 4 == type;
      this.serverError = 5 == type;
      this.error = 4 == type || 5 == type ? this.toError() : false;
      this.accepted = 202 == status;
      this.noContent = 204 == status;
      this.badRequest = 400 == status;
      this.unauthorized = 401 == status;
      this.notAcceptable = 406 == status;
      this.forbidden = 403 == status;
      this.notFound = 404 == status;
    };
  }
});

// node_modules/superagent/lib/should-retry.js
var require_should_retry = __commonJS({
  "node_modules/superagent/lib/should-retry.js"(exports, module) {
    "use strict";
    var ERROR_CODES = [
      "ECONNRESET",
      "ETIMEDOUT",
      "EADDRINFO",
      "ESOCKETTIMEDOUT"
    ];
    module.exports = function shouldRetry(err, res) {
      if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
      if (res && res.status && res.status >= 500) return true;
      if (err && "timeout" in err && err.code == "ECONNABORTED") return true;
      if (err && "crossDomain" in err) return true;
      return false;
    };
  }
});

// node_modules/superagent/lib/client.js
var require_client = __commonJS({
  "node_modules/superagent/lib/client.js"(exports, module) {
    var root;
    if (typeof window !== "undefined") {
      root = window;
    } else if (typeof self !== "undefined") {
      root = self;
    } else {
      console.warn("Using browser-only version of superagent in non-browser environment");
      root = exports;
    }
    var Emitter = require_component_emitter();
    var RequestBase = require_request_base();
    var isObject = require_is_object();
    var ResponseBase = require_response_base();
    var shouldRetry = require_should_retry();
    function noop() {
    }
    var request = exports = module.exports = function(method, url) {
      if ("function" == typeof url) {
        return new exports.Request("GET", method).end(url);
      }
      if (1 == arguments.length) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    };
    exports.Request = Request;
    request.getXHR = function() {
      if (root.XMLHttpRequest && (!root.location || "file:" != root.location.protocol || !root.ActiveXObject)) {
        return new XMLHttpRequest();
      } else {
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
        }
      }
      throw Error("Browser-only version of superagent could not find XHR");
    };
    var trim = "".trim ? function(s) {
      return s.trim();
    } : function(s) {
      return s.replace(/(^\s*|\s*$)/g, "");
    };
    function serialize(obj) {
      if (!isObject(obj)) return obj;
      var pairs = [];
      for (var key in obj) {
        pushEncodedKeyValuePair(pairs, key, obj[key]);
      }
      return pairs.join("&");
    }
    function pushEncodedKeyValuePair(pairs, key, val) {
      if (val != null) {
        if (Array.isArray(val)) {
          val.forEach(function(v) {
            pushEncodedKeyValuePair(pairs, key, v);
          });
        } else if (isObject(val)) {
          for (var subkey in val) {
            pushEncodedKeyValuePair(pairs, key + "[" + subkey + "]", val[subkey]);
          }
        } else {
          pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(val));
        }
      } else if (val === null) {
        pairs.push(encodeURIComponent(key));
      }
    }
    request.serializeObject = serialize;
    function parseString(str) {
      var obj = {};
      var pairs = str.split("&");
      var pair;
      var pos;
      for (var i = 0, len = pairs.length; i < len; ++i) {
        pair = pairs[i];
        pos = pair.indexOf("=");
        if (pos == -1) {
          obj[decodeURIComponent(pair)] = "";
        } else {
          obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
        }
      }
      return obj;
    }
    request.parseString = parseString;
    request.types = {
      html: "text/html",
      json: "application/json",
      xml: "text/xml",
      urlencoded: "application/x-www-form-urlencoded",
      "form": "application/x-www-form-urlencoded",
      "form-data": "application/x-www-form-urlencoded"
    };
    request.serialize = {
      "application/x-www-form-urlencoded": serialize,
      "application/json": JSON.stringify
    };
    request.parse = {
      "application/x-www-form-urlencoded": parseString,
      "application/json": JSON.parse
    };
    function parseHeader(str) {
      var lines = str.split(/\r?\n/);
      var fields = {};
      var index;
      var line;
      var field;
      var val;
      for (var i = 0, len = lines.length; i < len; ++i) {
        line = lines[i];
        index = line.indexOf(":");
        if (index === -1) {
          continue;
        }
        field = line.slice(0, index).toLowerCase();
        val = trim(line.slice(index + 1));
        fields[field] = val;
      }
      return fields;
    }
    function isJSON(mime) {
      return /[\/+]json\b/.test(mime);
    }
    function Response(req) {
      this.req = req;
      this.xhr = this.req.xhr;
      this.text = this.req.method != "HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text") || typeof this.xhr.responseType === "undefined" ? this.xhr.responseText : null;
      this.statusText = this.req.xhr.statusText;
      var status = this.xhr.status;
      if (status === 1223) {
        status = 204;
      }
      this._setStatusProperties(status);
      this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
      this.header["content-type"] = this.xhr.getResponseHeader("content-type");
      this._setHeaderProperties(this.header);
      if (null === this.text && req._responseType) {
        this.body = this.xhr.response;
      } else {
        this.body = this.req.method != "HEAD" ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
      }
    }
    ResponseBase(Response.prototype);
    Response.prototype._parseBody = function(str) {
      var parse = request.parse[this.type];
      if (this.req._parser) {
        return this.req._parser(this, str);
      }
      if (!parse && isJSON(this.type)) {
        parse = request.parse["application/json"];
      }
      return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
    };
    Response.prototype.toError = function() {
      var req = this.req;
      var method = req.method;
      var url = req.url;
      var msg = "cannot " + method + " " + url + " (" + this.status + ")";
      var err = new Error(msg);
      err.status = this.status;
      err.method = method;
      err.url = url;
      return err;
    };
    request.Response = Response;
    function Request(method, url) {
      var self2 = this;
      this._query = this._query || [];
      this.method = method;
      this.url = url;
      this.header = {};
      this._header = {};
      this.on("end", function() {
        var err = null;
        var res = null;
        try {
          res = new Response(self2);
        } catch (e) {
          err = new Error("Parser is unable to parse the response");
          err.parse = true;
          err.original = e;
          if (self2.xhr) {
            err.rawResponse = typeof self2.xhr.responseType == "undefined" ? self2.xhr.responseText : self2.xhr.response;
            err.status = self2.xhr.status ? self2.xhr.status : null;
            err.statusCode = err.status;
          } else {
            err.rawResponse = null;
            err.status = null;
          }
          return self2.callback(err);
        }
        self2.emit("response", res);
        var new_err;
        try {
          if (!self2._isResponseOK(res)) {
            new_err = new Error(res.statusText || "Unsuccessful HTTP response");
          }
        } catch (custom_err) {
          new_err = custom_err;
        }
        if (new_err) {
          new_err.original = err;
          new_err.response = res;
          new_err.status = res.status;
          self2.callback(new_err, res);
        } else {
          self2.callback(null, res);
        }
      });
    }
    Emitter(Request.prototype);
    RequestBase(Request.prototype);
    Request.prototype.type = function(type) {
      this.set("Content-Type", request.types[type] || type);
      return this;
    };
    Request.prototype.accept = function(type) {
      this.set("Accept", request.types[type] || type);
      return this;
    };
    Request.prototype.auth = function(user, pass, options) {
      if (typeof pass === "object" && pass !== null) {
        options = pass;
      }
      if (!options) {
        options = {
          type: "function" === typeof btoa ? "basic" : "auto"
        };
      }
      switch (options.type) {
        case "basic":
          this.set("Authorization", "Basic " + btoa(user + ":" + pass));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer " + user);
          break;
      }
      return this;
    };
    Request.prototype.query = function(val) {
      if ("string" != typeof val) val = serialize(val);
      if (val) this._query.push(val);
      return this;
    };
    Request.prototype.attach = function(field, file, options) {
      if (file) {
        if (this._data) {
          throw Error("superagent can't mix .send() and .attach()");
        }
        this._getFormData().append(field, file, options || file.name);
      }
      return this;
    };
    Request.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new root.FormData();
      }
      return this._formData;
    };
    Request.prototype.callback = function(err, res) {
      if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
        return this._retry();
      }
      var fn = this._callback;
      this.clearTimeout();
      if (err) {
        if (this._maxRetries) err.retries = this._retries - 1;
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request.prototype.crossDomainError = function() {
      var err = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
      err.crossDomain = true;
      err.status = this.status;
      err.method = this.method;
      err.url = this.url;
      this.callback(err);
    };
    Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function() {
      console.warn("This is not supported in browser version of superagent");
      return this;
    };
    Request.prototype.pipe = Request.prototype.write = function() {
      throw Error("Streaming is not supported in browser version of superagent");
    };
    Request.prototype._isHost = function _isHost(obj) {
      return obj && "object" === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== "[object Object]";
    };
    Request.prototype.end = function(fn) {
      if (this._endCalled) {
        console.warn("Warning: .end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop;
      this._finalizeQueryString();
      return this._end();
    };
    Request.prototype._end = function() {
      var self2 = this;
      var xhr = this.xhr = request.getXHR();
      var data = this._formData || this._data;
      this._setTimeouts();
      xhr.onreadystatechange = function() {
        var readyState = xhr.readyState;
        if (readyState >= 2 && self2._responseTimeoutTimer) {
          clearTimeout(self2._responseTimeoutTimer);
        }
        if (4 != readyState) {
          return;
        }
        var status;
        try {
          status = xhr.status;
        } catch (e) {
          status = 0;
        }
        if (!status) {
          if (self2.timedout || self2._aborted) return;
          return self2.crossDomainError();
        }
        self2.emit("end");
      };
      var handleProgress = function(direction, e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
        }
        e.direction = direction;
        self2.emit("progress", e);
      };
      if (this.hasListeners("progress")) {
        try {
          xhr.onprogress = handleProgress.bind(null, "download");
          if (xhr.upload) {
            xhr.upload.onprogress = handleProgress.bind(null, "upload");
          }
        } catch (e) {
        }
      }
      try {
        if (this.username && this.password) {
          xhr.open(this.method, this.url, true, this.username, this.password);
        } else {
          xhr.open(this.method, this.url, true);
        }
      } catch (err) {
        return this.callback(err);
      }
      if (this._withCredentials) xhr.withCredentials = true;
      if (!this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof data && !this._isHost(data)) {
        var contentType = this._header["content-type"];
        var serialize2 = this._serializer || request.serialize[contentType ? contentType.split(";")[0] : ""];
        if (!serialize2 && isJSON(contentType)) {
          serialize2 = request.serialize["application/json"];
        }
        if (serialize2) data = serialize2(data);
      }
      for (var field in this.header) {
        if (null == this.header[field]) continue;
        if (this.header.hasOwnProperty(field))
          xhr.setRequestHeader(field, this.header[field]);
      }
      if (this._responseType) {
        xhr.responseType = this._responseType;
      }
      this.emit("request", this);
      xhr.send(typeof data !== "undefined" ? data : null);
      return this;
    };
    request.get = function(url, data, fn) {
      var req = request("GET", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.query(data);
      if (fn) req.end(fn);
      return req;
    };
    request.head = function(url, data, fn) {
      var req = request("HEAD", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.query(data);
      if (fn) req.end(fn);
      return req;
    };
    request.options = function(url, data, fn) {
      var req = request("OPTIONS", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    function del(url, data, fn) {
      var req = request("DELETE", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    }
    request["del"] = del;
    request["delete"] = del;
    request.patch = function(url, data, fn) {
      var req = request("PATCH", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    request.post = function(url, data, fn) {
      var req = request("POST", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    request.put = function(url, data, fn) {
      var req = request("PUT", url);
      if ("function" == typeof data) fn = data, data = null;
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
  }
});

// browser-external:querystring
var require_querystring = __commonJS({
  "browser-external:querystring"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "querystring" has been externalized for browser compatibility. Cannot access "querystring.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@researchable/fitbit-web-api/src/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/ApiClient.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["superagent", "querystring"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_client(), require_querystring());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.ApiClient = factory(root.superagent, root.querystring);
      }
    })(exports, function(superagent, querystring) {
      "use strict";
      var exports2 = function() {
        this.basePath = "https://api.fitbit.com".replace(/\/+$/, "");
        this.authentications = {
          "oauth2": { type: "oauth2" }
        };
        this.defaultHeaders = {};
        this.timeout = 6e4;
        this.cache = true;
        this.enableCookies = false;
        if (typeof window === "undefined") {
          this.agent = new superagent.agent();
        }
        this.requestAgent = null;
      };
      exports2.prototype.paramToString = function(param) {
        if (param == void 0 || param == null) {
          return "";
        }
        if (param instanceof Date) {
          return param.toJSON();
        }
        return param.toString();
      };
      exports2.prototype.buildUrl = function(path, pathParams) {
        if (!path.match(/^\//)) {
          path = "/" + path;
        }
        var url = this.basePath + path;
        var _this = this;
        url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
          var value;
          if (pathParams.hasOwnProperty(key)) {
            value = _this.paramToString(pathParams[key]);
          } else {
            value = fullMatch;
          }
          return encodeURIComponent(value);
        });
        return url;
      };
      exports2.prototype.isJsonMime = function(contentType) {
        return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
      };
      exports2.prototype.jsonPreferredMime = function(contentTypes) {
        for (var i = 0; i < contentTypes.length; i++) {
          if (this.isJsonMime(contentTypes[i])) {
            return contentTypes[i];
          }
        }
        return contentTypes[0];
      };
      exports2.prototype.isFileParam = function(param) {
        if (typeof __require === "function") {
          var fs;
          try {
            fs = require_fs();
          } catch (err) {
          }
          if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
            return true;
          }
        }
        if (typeof Buffer === "function" && param instanceof Buffer) {
          return true;
        }
        if (typeof Blob === "function" && param instanceof Blob) {
          return true;
        }
        if (typeof File === "function" && param instanceof File) {
          return true;
        }
        return false;
      };
      exports2.prototype.normalizeParams = function(params) {
        var newParams = {};
        for (var key in params) {
          if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
            var value = params[key];
            if (this.isFileParam(value) || Array.isArray(value)) {
              newParams[key] = value;
            } else {
              newParams[key] = this.paramToString(value);
            }
          }
        }
        return newParams;
      };
      exports2.CollectionFormatEnum = {
        /**
         * Comma-separated values. Value: <code>csv</code>
         * @const
         */
        CSV: ",",
        /**
         * Space-separated values. Value: <code>ssv</code>
         * @const
         */
        SSV: " ",
        /**
         * Tab-separated values. Value: <code>tsv</code>
         * @const
         */
        TSV: "	",
        /**
         * Pipe(|)-separated values. Value: <code>pipes</code>
         * @const
         */
        PIPES: "|",
        /**
         * Native array. Value: <code>multi</code>
         * @const
         */
        MULTI: "multi"
      };
      exports2.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
        if (param == null) {
          return null;
        }
        switch (collectionFormat) {
          case "csv":
            return param.map(this.paramToString).join(",");
          case "ssv":
            return param.map(this.paramToString).join(" ");
          case "tsv":
            return param.map(this.paramToString).join("	");
          case "pipes":
            return param.map(this.paramToString).join("|");
          case "multi":
            return param.map(this.paramToString);
          default:
            throw new Error("Unknown collection format: " + collectionFormat);
        }
      };
      exports2.prototype.applyAuthToRequest = function(request, authNames) {
        var _this = this;
        authNames.forEach(function(authName) {
          var auth = _this.authentications[authName];
          switch (auth.type) {
            case "basic":
              if (auth.username || auth.password) {
                request.auth(auth.username || "", auth.password || "");
              }
              break;
            case "apiKey":
              if (auth.apiKey) {
                var data = {};
                if (auth.apiKeyPrefix) {
                  data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
                } else {
                  data[auth.name] = auth.apiKey;
                }
                if (auth["in"] === "header") {
                  request.set(data);
                } else {
                  request.query(data);
                }
              }
              break;
            case "oauth2":
              if (auth.accessToken) {
                request.set({ "Authorization": "Bearer " + auth.accessToken });
              }
              break;
            default:
              throw new Error("Unknown authentication type: " + auth.type);
          }
        });
      };
      exports2.prototype.deserialize = function deserialize(response, returnType) {
        if (response == null || returnType == null || response.status == 204) {
          return null;
        }
        var data = response.body;
        if (data == null || typeof data === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
          data = response.text;
        }
        return exports2.convertToType(data, returnType);
      };
      exports2.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, callback) {
        var _this = this;
        var url = this.buildUrl(path, pathParams);
        var request = superagent(httpMethod, url);
        this.applyAuthToRequest(request, authNames);
        for (var key in collectionQueryParams) {
          if (collectionQueryParams.hasOwnProperty(key)) {
            var param = collectionQueryParams[key];
            if (param.collectionFormat === "csv") {
              if (param.value != null) {
                var value = param.value.map(this.paramToString).map(encodeURIComponent).join(",");
                request.query(encodeURIComponent(key) + "=" + value);
              }
            } else {
              queryParams[key] = this.buildCollectionParam(param.value, param.collectionFormat);
            }
          }
        }
        if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
          queryParams["_"] = (/* @__PURE__ */ new Date()).getTime();
        }
        request.query(this.normalizeParams(queryParams));
        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
        if (this.requestAgent) {
          request.agent(this.requestAgent);
        }
        request.timeout(this.timeout);
        var contentType = this.jsonPreferredMime(contentTypes);
        if (contentType) {
          if (contentType != "multipart/form-data") {
            request.type(contentType);
          }
        } else if (!request.header["Content-Type"]) {
          request.type("application/json");
        }
        if (contentType === "application/x-www-form-urlencoded") {
          request.send(querystring.stringify(this.normalizeParams(formParams)));
        } else if (contentType == "multipart/form-data") {
          var _formParams = this.normalizeParams(formParams);
          for (var key in _formParams) {
            if (_formParams.hasOwnProperty(key)) {
              if (this.isFileParam(_formParams[key])) {
                request.attach(key, _formParams[key]);
              } else {
                request.field(key, _formParams[key]);
              }
            }
          }
        } else if (bodyParam) {
          request.send(bodyParam);
        }
        var accept = this.jsonPreferredMime(accepts);
        if (accept) {
          request.accept(accept);
        }
        if (returnType === "Blob") {
          request.responseType("blob");
        } else if (returnType === "String") {
          request.responseType("string");
        }
        if (this.enableCookies) {
          if (typeof window === "undefined") {
            this.agent.attachCookies(request);
          } else {
            request.withCredentials();
          }
        }
        request.end(function(error, response) {
          if (callback) {
            var data = null;
            if (!error) {
              try {
                data = _this.deserialize(response, returnType);
                if (_this.enableCookies && typeof window === "undefined") {
                  _this.agent.saveCookies(response);
                }
              } catch (err) {
                error = err;
              }
            }
            callback(error, data, response);
          }
        });
        return request;
      };
      exports2.parseDate = function(str) {
        return new Date(str.replace(/T/i, " "));
      };
      exports2.convertToType = function(data, type) {
        if (data === null || data === void 0)
          return data;
        switch (type) {
          case "Boolean":
            return Boolean(data);
          case "Integer":
            return parseInt(data, 10);
          case "Number":
            return parseFloat(data);
          case "String":
            return String(data);
          case "Date":
            return this.parseDate(String(data));
          case "Blob":
            return data;
          default:
            if (type === Object) {
              return data;
            } else if (typeof type === "function") {
              return type.constructFromObject(data);
            } else if (Array.isArray(type)) {
              var itemType = type[0];
              return data.map(function(item) {
                return exports2.convertToType(item, itemType);
              });
            } else if (typeof type === "object") {
              var keyType, valueType;
              for (var k in type) {
                if (type.hasOwnProperty(k)) {
                  keyType = k;
                  valueType = type[k];
                  break;
                }
              }
              var result = {};
              for (var k in data) {
                if (data.hasOwnProperty(k)) {
                  var key = exports2.convertToType(k, keyType);
                  var value = exports2.convertToType(data[k], valueType);
                  result[key] = value;
                }
              }
              return result;
            } else {
              return data;
            }
        }
      };
      exports2.constructFromObject = function(data, obj, itemType) {
        if (Array.isArray(data)) {
          for (var i = 0; i < data.length; i++) {
            if (data.hasOwnProperty(i))
              obj[i] = exports2.convertToType(data[i], itemType);
          }
        } else {
          for (var k in data) {
            if (data.hasOwnProperty(k))
              obj[k] = exports2.convertToType(data[k], itemType);
          }
        }
      };
      exports2.instance = new exports2();
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/ActivityApi.js
var require_ActivityApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/ActivityApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.ActivityApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addActivitiesLog = function(activityId, manualCalories, startTime, durationMillis, _date, distance, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (activityId === void 0 || activityId === null) {
            throw new Error("Missing the required parameter 'activityId' when calling addActivitiesLog");
          }
          if (manualCalories === void 0 || manualCalories === null) {
            throw new Error("Missing the required parameter 'manualCalories' when calling addActivitiesLog");
          }
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling addActivitiesLog");
          }
          if (durationMillis === void 0 || durationMillis === null) {
            throw new Error("Missing the required parameter 'durationMillis' when calling addActivitiesLog");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addActivitiesLog");
          }
          if (distance === void 0 || distance === null) {
            throw new Error("Missing the required parameter 'distance' when calling addActivitiesLog");
          }
          var pathParams = {};
          var queryParams = {
            "activityId": activityId,
            "activityName": opts["activityName"],
            "manualCalories": manualCalories,
            "startTime": startTime,
            "durationMillis": durationMillis,
            "date": _date,
            "distance": distance,
            "distanceUnit": opts["distanceUnit"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addFavoriteActivities = function(activityId, callback) {
          var postBody = null;
          if (activityId === void 0 || activityId === null) {
            throw new Error("Missing the required parameter 'activityId' when calling addFavoriteActivities");
          }
          var pathParams = {
            "activity-id": activityId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/favorite/{activity-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addUpdateActivitiesGoals = function(period, type, value, callback) {
          var postBody = null;
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling addUpdateActivitiesGoals");
          }
          if (type === void 0 || type === null) {
            throw new Error("Missing the required parameter 'type' when calling addUpdateActivitiesGoals");
          }
          if (value === void 0 || value === null) {
            throw new Error("Missing the required parameter 'value' when calling addUpdateActivitiesGoals");
          }
          var pathParams = {
            "period": period
          };
          var queryParams = {
            "type": type,
            "value": value
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/goals/{period}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteActivitiesLog = function(activityLogId, callback) {
          var postBody = null;
          if (activityLogId === void 0 || activityLogId === null) {
            throw new Error("Missing the required parameter 'activityLogId' when calling deleteActivitiesLog");
          }
          var pathParams = {
            "activity-log-id": activityLogId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{activity-log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteFavoriteActivities = function(activityId, callback) {
          var postBody = null;
          if (activityId === void 0 || activityId === null) {
            throw new Error("Missing the required parameter 'activityId' when calling deleteFavoriteActivities");
          }
          var pathParams = {
            "activity-id": activityId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/favorite/{activity-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesGoals = function(period, callback) {
          var postBody = null;
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getActivitiesGoals");
          }
          var pathParams = {
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/goals/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesLog = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesLogList = function(sort, offset, limit, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (sort === void 0 || sort === null) {
            throw new Error("Missing the required parameter 'sort' when calling getActivitiesLogList");
          }
          if (offset === void 0 || offset === null) {
            throw new Error("Missing the required parameter 'offset' when calling getActivitiesLogList");
          }
          if (limit === void 0 || limit === null) {
            throw new Error("Missing the required parameter 'limit' when calling getActivitiesLogList");
          }
          var pathParams = {};
          var queryParams = {
            "beforeDate": opts["beforeDate"],
            "afterDate": opts["afterDate"],
            "sort": sort,
            "offset": offset,
            "limit": limit
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/list.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesTCX = function(logId, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (logId === void 0 || logId === null) {
            throw new Error("Missing the required parameter 'logId' when calling getActivitiesTCX");
          }
          var pathParams = {
            "log-id": logId
          };
          var queryParams = {
            "includePartialTCX": opts["includePartialTCX"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{log-id}.tcx",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesTypeDetail = function(activityId, callback) {
          var postBody = null;
          if (activityId === void 0 || activityId === null) {
            throw new Error("Missing the required parameter 'activityId' when calling getActivitiesTypeDetail");
          }
          var pathParams = {
            "activity-id": activityId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/activities/{activity-id}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesTypes = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/activities.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFavoriteActivities = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/favorite.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFrequentActivities = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/frequent.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getRecentActivities = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/recent.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/ActivityIntradayTimeSeriesApi.js
var require_ActivityIntradayTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/ActivityIntradayTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.ActivityIntradayTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getActivitiesResourceByDateIntraday = function(resourcePath, _date, detailLevel, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDateIntraday");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesResourceByDateIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getActivitiesResourceByDateIntraday");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "detail-level": detailLevel
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{date}/1d/{detail-level}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesResourceByDateRangeIntraday = function(resourcePath, baseDate, endDate, detailLevel, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDateRangeIntraday");
          }
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getActivitiesResourceByDateRangeIntraday");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getActivitiesResourceByDateRangeIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getActivitiesResourceByDateRangeIntraday");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "base-date": baseDate,
            "end-date": endDate,
            "detail-level": detailLevel
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{base-date}/{end-date}/{detail-level}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesResourceByDateRangeTimeSeriesIntraday = function(resourcePath, _date, endDate, detailLevel, startTime, endTime, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          if (endTime === void 0 || endTime === null) {
            throw new Error("Missing the required parameter 'endTime' when calling getActivitiesResourceByDateRangeTimeSeriesIntraday");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "end-date": endDate,
            "detail-level": detailLevel,
            "start-time": startTime,
            "end-time": endTime
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{date}/{end-date}/{detail-level}/time/{start-time}/{end-time}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesResourceByDateTimeSeriesIntraday = function(resourcePath, _date, detailLevel, startTime, endTime, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDateTimeSeriesIntraday");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesResourceByDateTimeSeriesIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getActivitiesResourceByDateTimeSeriesIntraday");
          }
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling getActivitiesResourceByDateTimeSeriesIntraday");
          }
          if (endTime === void 0 || endTime === null) {
            throw new Error("Missing the required parameter 'endTime' when calling getActivitiesResourceByDateTimeSeriesIntraday");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "detail-level": detailLevel,
            "start-time": startTime,
            "end-time": endTime
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{date}/1d/{detail-level}/time/{start-time}/{end-time}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/ActivityTimeSeriesApi.js
var require_ActivityTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/ActivityTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.ActivityTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getActivitiesResourceByDatePeriod = function(resourcePath, _date, period, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDatePeriod");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesResourceByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getActivitiesResourceByDatePeriod");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesResourceByDateRange = function(resourcePath, baseDate, endDate, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesResourceByDateRange");
          }
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getActivitiesResourceByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getActivitiesResourceByDateRange");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/{resource-path}/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesTrackerResourceByDatePeriod = function(resourcePath, _date, period, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesTrackerResourceByDatePeriod");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getActivitiesTrackerResourceByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getActivitiesTrackerResourceByDatePeriod");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/tracker/{resource-path}/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getActivitiesTrackerResourceByDateRange = function(resourcePath, baseDate, endDate, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getActivitiesTrackerResourceByDateRange");
          }
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getActivitiesTrackerResourceByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getActivitiesTrackerResourceByDateRange");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/x-www-form-urlencoded"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/tracker/{resource-path}/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/AuthApi.js
var require_AuthApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/AuthApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.AuthApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.introspect = function(token, callback) {
          var postBody = null;
          if (token === void 0 || token === null) {
            throw new Error("Missing the required parameter 'token' when calling introspect");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {
            "token": token
          };
          var authNames = ["oauth2"];
          var contentTypes = ["application/x-www-form-urlencoded"];
          var accepts = [];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/oauth2/introspect",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.oauthToken = function(clientId, grantType, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (clientId === void 0 || clientId === null) {
            throw new Error("Missing the required parameter 'clientId' when calling oauthToken");
          }
          if (grantType === void 0 || grantType === null) {
            throw new Error("Missing the required parameter 'grantType' when calling oauthToken");
          }
          var pathParams = {};
          var queryParams = {
            "code": opts["code"],
            "client_id": clientId,
            "expires_in": opts["expiresIn"],
            "grant_type": grantType,
            "redirect_uri": opts["redirectUri"],
            "refresh_token": opts["refreshToken"],
            "state": opts["state"]
          };
          var collectionQueryParams = {};
          var headerParams = {
            "Authorization": opts["authorization"]
          };
          var formParams = {};
          var authNames = [];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/oauth2/token",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/BodyAndWeightApi.js
var require_BodyAndWeightApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/BodyAndWeightApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.BodyAndWeightApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addBodyFatLog = function(fat, _date, time, callback) {
          var postBody = null;
          if (fat === void 0 || fat === null) {
            throw new Error("Missing the required parameter 'fat' when calling addBodyFatLog");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addBodyFatLog");
          }
          if (time === void 0 || time === null) {
            throw new Error("Missing the required parameter 'time' when calling addBodyFatLog");
          }
          var pathParams = {};
          var queryParams = {
            "fat": fat,
            "date": _date,
            "time": time
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addWeightLog = function(weight, _date, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (weight === void 0 || weight === null) {
            throw new Error("Missing the required parameter 'weight' when calling addWeightLog");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addWeightLog");
          }
          var pathParams = {};
          var queryParams = {
            "weight": weight,
            "date": _date,
            "time": opts["time"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteBodyFatLog = function(bodyFatLogId, callback) {
          var postBody = null;
          if (bodyFatLogId === void 0 || bodyFatLogId === null) {
            throw new Error("Missing the required parameter 'bodyFatLogId' when calling deleteBodyFatLog");
          }
          var pathParams = {
            "body-fat-log-id": bodyFatLogId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat/{body-fat-log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteWeightLog = function(bodyWeightLogId, callback) {
          var postBody = null;
          if (bodyWeightLogId === void 0 || bodyWeightLogId === null) {
            throw new Error("Missing the required parameter 'bodyWeightLogId' when calling deleteWeightLog");
          }
          var pathParams = {
            "body-weight-log-id": bodyWeightLogId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight/{body-weight-log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getBodyFatByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getBodyFatByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getBodyFatByDatePeriod = function(_date, period, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getBodyFatByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getBodyFatByDatePeriod");
          }
          var pathParams = {
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getBodyFatByDateRange = function(baseDate, endDate, callback) {
          var postBody = null;
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getBodyFatByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getBodyFatByDateRange");
          }
          var pathParams = {
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getBodyGoals = function(goalType, callback) {
          var postBody = null;
          if (goalType === void 0 || goalType === null) {
            throw new Error("Missing the required parameter 'goalType' when calling getBodyGoals");
          }
          var pathParams = {
            "goal-type": goalType
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/{goal-type}/goal.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getWeightByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getWeightByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getWeightByDatePeriod = function(_date, period, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getWeightByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getWeightByDatePeriod");
          }
          var pathParams = {
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getWeightByDateRange = function(baseDate, endDate, callback) {
          var postBody = null;
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getWeightByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getWeightByDateRange");
          }
          var pathParams = {
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateBodyFatGoal = function(fat, callback) {
          var postBody = null;
          if (fat === void 0 || fat === null) {
            throw new Error("Missing the required parameter 'fat' when calling updateBodyFatGoal");
          }
          var pathParams = {};
          var queryParams = {
            "fat": fat
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/fat/goal.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateWeightGoal = function(startDate, startWeight, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (startDate === void 0 || startDate === null) {
            throw new Error("Missing the required parameter 'startDate' when calling updateWeightGoal");
          }
          if (startWeight === void 0 || startWeight === null) {
            throw new Error("Missing the required parameter 'startWeight' when calling updateWeightGoal");
          }
          var pathParams = {};
          var queryParams = {
            "startDate": startDate,
            "startWeight": startWeight,
            "weight": opts["weight"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/log/weight/goal.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/BodyAndWeightTimeSeriesApi.js
var require_BodyAndWeightTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/BodyAndWeightTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.BodyAndWeightTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getBodyResourceByDatePeriod = function(resourcePath, _date, period, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getBodyResourceByDatePeriod");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getBodyResourceByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getBodyResourceByDatePeriod");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/{resource-path}/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getBodyResourceByDateRange = function(resourcePath, baseDate, endDate, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getBodyResourceByDateRange");
          }
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getBodyResourceByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getBodyResourceByDateRange");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/body/{resource-path}/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/DevicesApi.js
var require_DevicesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/DevicesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.DevicesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addAlarms = function(trackerId, time, enabled, recurring, weekDays, callback) {
          var postBody = null;
          if (trackerId === void 0 || trackerId === null) {
            throw new Error("Missing the required parameter 'trackerId' when calling addAlarms");
          }
          if (time === void 0 || time === null) {
            throw new Error("Missing the required parameter 'time' when calling addAlarms");
          }
          if (enabled === void 0 || enabled === null) {
            throw new Error("Missing the required parameter 'enabled' when calling addAlarms");
          }
          if (recurring === void 0 || recurring === null) {
            throw new Error("Missing the required parameter 'recurring' when calling addAlarms");
          }
          if (weekDays === void 0 || weekDays === null) {
            throw new Error("Missing the required parameter 'weekDays' when calling addAlarms");
          }
          var pathParams = {
            "tracker-id": trackerId
          };
          var queryParams = {
            "time": time,
            "enabled": enabled,
            "recurring": recurring,
            "weekDays": weekDays
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/devices/tracker/{tracker-id}/alarms.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteAlarms = function(trackerId, alarmId, callback) {
          var postBody = null;
          if (trackerId === void 0 || trackerId === null) {
            throw new Error("Missing the required parameter 'trackerId' when calling deleteAlarms");
          }
          if (alarmId === void 0 || alarmId === null) {
            throw new Error("Missing the required parameter 'alarmId' when calling deleteAlarms");
          }
          var pathParams = {
            "tracker-id": trackerId,
            "alarm-id": alarmId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getAlarms = function(trackerId, callback) {
          var postBody = null;
          if (trackerId === void 0 || trackerId === null) {
            throw new Error("Missing the required parameter 'trackerId' when calling getAlarms");
          }
          var pathParams = {
            "tracker-id": trackerId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/devices/tracker/{tracker-id}/alarms.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getDevices = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/devices.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateAlarms = function(trackerId, alarmId, time, enabled, recurring, weekDays, snoozeLength, snoozeCount, callback) {
          var postBody = null;
          if (trackerId === void 0 || trackerId === null) {
            throw new Error("Missing the required parameter 'trackerId' when calling updateAlarms");
          }
          if (alarmId === void 0 || alarmId === null) {
            throw new Error("Missing the required parameter 'alarmId' when calling updateAlarms");
          }
          if (time === void 0 || time === null) {
            throw new Error("Missing the required parameter 'time' when calling updateAlarms");
          }
          if (enabled === void 0 || enabled === null) {
            throw new Error("Missing the required parameter 'enabled' when calling updateAlarms");
          }
          if (recurring === void 0 || recurring === null) {
            throw new Error("Missing the required parameter 'recurring' when calling updateAlarms");
          }
          if (weekDays === void 0 || weekDays === null) {
            throw new Error("Missing the required parameter 'weekDays' when calling updateAlarms");
          }
          if (snoozeLength === void 0 || snoozeLength === null) {
            throw new Error("Missing the required parameter 'snoozeLength' when calling updateAlarms");
          }
          if (snoozeCount === void 0 || snoozeCount === null) {
            throw new Error("Missing the required parameter 'snoozeCount' when calling updateAlarms");
          }
          var pathParams = {
            "tracker-id": trackerId,
            "alarm-id": alarmId
          };
          var queryParams = {
            "time": time,
            "enabled": enabled,
            "recurring": recurring,
            "weekDays": weekDays,
            "snoozeLength": snoozeLength,
            "snoozeCount": snoozeCount
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/devices/tracker/{tracker-id}/alarms/{alarm-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/FoodAndWaterApi.js
var require_FoodAndWaterApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/FoodAndWaterApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.FoodAndWaterApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addFavoriteFood = function(foodId, callback) {
          var postBody = null;
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling addFavoriteFood");
          }
          var pathParams = {
            "food-id": foodId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/favorite/{food-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addFoods = function(name, defaultFoodMeasurementUnitId, defaultServingSize, calories, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (name === void 0 || name === null) {
            throw new Error("Missing the required parameter 'name' when calling addFoods");
          }
          if (defaultFoodMeasurementUnitId === void 0 || defaultFoodMeasurementUnitId === null) {
            throw new Error("Missing the required parameter 'defaultFoodMeasurementUnitId' when calling addFoods");
          }
          if (defaultServingSize === void 0 || defaultServingSize === null) {
            throw new Error("Missing the required parameter 'defaultServingSize' when calling addFoods");
          }
          if (calories === void 0 || calories === null) {
            throw new Error("Missing the required parameter 'calories' when calling addFoods");
          }
          var pathParams = {};
          var queryParams = {
            "name": name,
            "defaultFoodMeasurementUnitId": defaultFoodMeasurementUnitId,
            "defaultServingSize": defaultServingSize,
            "calories": calories,
            "formType": opts["formType"],
            "description": opts["description"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addFoodsLog = function(foodId, mealTypeId, unitId, amount, _date, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling addFoodsLog");
          }
          if (mealTypeId === void 0 || mealTypeId === null) {
            throw new Error("Missing the required parameter 'mealTypeId' when calling addFoodsLog");
          }
          if (unitId === void 0 || unitId === null) {
            throw new Error("Missing the required parameter 'unitId' when calling addFoodsLog");
          }
          if (amount === void 0 || amount === null) {
            throw new Error("Missing the required parameter 'amount' when calling addFoodsLog");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addFoodsLog");
          }
          var pathParams = {};
          var queryParams = {
            "foodId": foodId,
            "foodName": opts["foodName"],
            "mealTypeId": mealTypeId,
            "unitId": unitId,
            "amount": amount,
            "date": _date,
            "favorite": opts["favorite"],
            "brandName": opts["brandName"],
            "calories": opts["calories"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addMeal = function(name, description, foodId, unitId, amount, callback) {
          var postBody = null;
          if (name === void 0 || name === null) {
            throw new Error("Missing the required parameter 'name' when calling addMeal");
          }
          if (description === void 0 || description === null) {
            throw new Error("Missing the required parameter 'description' when calling addMeal");
          }
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling addMeal");
          }
          if (unitId === void 0 || unitId === null) {
            throw new Error("Missing the required parameter 'unitId' when calling addMeal");
          }
          if (amount === void 0 || amount === null) {
            throw new Error("Missing the required parameter 'amount' when calling addMeal");
          }
          var pathParams = {};
          var queryParams = {
            "name": name,
            "Description": description,
            "foodId": foodId,
            "unitId": unitId,
            "amount": amount
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/meals.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addUpdateFoodsGoal = function(calories, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (calories === void 0 || calories === null) {
            throw new Error("Missing the required parameter 'calories' when calling addUpdateFoodsGoal");
          }
          var pathParams = {};
          var queryParams = {
            "calories": calories,
            "intensity": opts["intensity"],
            "personalized": opts["personalized"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/goal.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addUpdateWaterGoal = function(target, callback) {
          var postBody = null;
          if (target === void 0 || target === null) {
            throw new Error("Missing the required parameter 'target' when calling addUpdateWaterGoal");
          }
          var pathParams = {};
          var queryParams = {
            "target": target
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water/goal.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.addWaterLog = function(_date, amount, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addWaterLog");
          }
          if (amount === void 0 || amount === null) {
            throw new Error("Missing the required parameter 'amount' when calling addWaterLog");
          }
          var pathParams = {};
          var queryParams = {
            "date": _date,
            "amount": amount,
            "unit": opts["unit"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteFavoriteFood = function(foodId, callback) {
          var postBody = null;
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling deleteFavoriteFood");
          }
          var pathParams = {
            "food-id": foodId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/favorite/{food-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteFoods = function(foodId, callback) {
          var postBody = null;
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling deleteFoods");
          }
          var pathParams = {
            "food-id": foodId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/{food-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteFoodsLog = function(foodLogId, callback) {
          var postBody = null;
          if (foodLogId === void 0 || foodLogId === null) {
            throw new Error("Missing the required parameter 'foodLogId' when calling deleteFoodsLog");
          }
          var pathParams = {
            "food-log-id": foodLogId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/{food-log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteMeal = function(mealId, callback) {
          var postBody = null;
          if (mealId === void 0 || mealId === null) {
            throw new Error("Missing the required parameter 'mealId' when calling deleteMeal");
          }
          var pathParams = {
            "meal-id": mealId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/meals/{meal-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteWaterLog = function(waterLogId, callback) {
          var postBody = null;
          if (waterLogId === void 0 || waterLogId === null) {
            throw new Error("Missing the required parameter 'waterLogId' when calling deleteWaterLog");
          }
          var pathParams = {
            "water-log-id": waterLogId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water/{water-log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFavoriteFoods = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/favorite.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getFoodsByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsGoal = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/goal.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsInfo = function(foodId, callback) {
          var postBody = null;
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling getFoodsInfo");
          }
          var pathParams = {
            "food-id": foodId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/foods/{food-id}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsList = function(query, callback) {
          var postBody = null;
          if (query === void 0 || query === null) {
            throw new Error("Missing the required parameter 'query' when calling getFoodsList");
          }
          var pathParams = {};
          var queryParams = {
            "query": query
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/foods/search.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsLocales = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/foods/locales.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsUnits = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/foods/units.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFrequentFoods = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/frequent.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getMeals = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/meals.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getRecentFoods = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/recent.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getWaterByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getWaterByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getWaterGoal = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water/goal.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateMeal = function(mealId, name, description, foodId, unitId, amount, callback) {
          var postBody = null;
          if (mealId === void 0 || mealId === null) {
            throw new Error("Missing the required parameter 'mealId' when calling updateMeal");
          }
          if (name === void 0 || name === null) {
            throw new Error("Missing the required parameter 'name' when calling updateMeal");
          }
          if (description === void 0 || description === null) {
            throw new Error("Missing the required parameter 'description' when calling updateMeal");
          }
          if (foodId === void 0 || foodId === null) {
            throw new Error("Missing the required parameter 'foodId' when calling updateMeal");
          }
          if (unitId === void 0 || unitId === null) {
            throw new Error("Missing the required parameter 'unitId' when calling updateMeal");
          }
          if (amount === void 0 || amount === null) {
            throw new Error("Missing the required parameter 'amount' when calling updateMeal");
          }
          var pathParams = {
            "meal-id": mealId
          };
          var queryParams = {
            "name": name,
            "Description": description,
            "foodId": foodId,
            "unitId": unitId,
            "amount": amount
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/meals/{meal-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateWaterLog = function(waterLogId, amount, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (waterLogId === void 0 || waterLogId === null) {
            throw new Error("Missing the required parameter 'waterLogId' when calling updateWaterLog");
          }
          if (amount === void 0 || amount === null) {
            throw new Error("Missing the required parameter 'amount' when calling updateWaterLog");
          }
          var pathParams = {
            "water-log-id": waterLogId
          };
          var queryParams = {
            "amount": amount,
            "unit": opts["unit"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/water/{water-log-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/FoodAndWaterTimeSeriesApi.js
var require_FoodAndWaterTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/FoodAndWaterTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.FoodAndWaterTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getFoodsByDateRange = function(resourcePath, baseDate, endDate, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getFoodsByDateRange");
          }
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getFoodsByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getFoodsByDateRange");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/{resource-path}/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFoodsResourceByDatePeriod = function(resourcePath, _date, period, callback) {
          var postBody = null;
          if (resourcePath === void 0 || resourcePath === null) {
            throw new Error("Missing the required parameter 'resourcePath' when calling getFoodsResourceByDatePeriod");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getFoodsResourceByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getFoodsResourceByDatePeriod");
          }
          var pathParams = {
            "resource-path": resourcePath,
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/foods/log/{resource-path}/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/FriendsApi.js
var require_FriendsApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/FriendsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.FriendsApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createFriendsInvitations = function(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "invitedUserEmail": opts["invitedUserEmail"],
            "invitedUserId": opts["invitedUserId"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["text/plain"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/user/-/friends/invitations",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFriends = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/user/-/friends.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFriendsInvitations = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/user/-/friends/invitations.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getFriendsLeaderboard = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/user/-/leaderboard/friends.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.respondFriendsInvitation = function(fromUserId, accept, callback) {
          var postBody = null;
          if (fromUserId === void 0 || fromUserId === null) {
            throw new Error("Missing the required parameter 'fromUserId' when calling respondFriendsInvitation");
          }
          if (accept === void 0 || accept === null) {
            throw new Error("Missing the required parameter 'accept' when calling respondFriendsInvitation");
          }
          var pathParams = {
            "from-user-id": fromUserId
          };
          var queryParams = {
            "accept": accept
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["text/plain"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.1/user/-/friends/invitations/{from-user-id}",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/HeartRateIntradayTimeSeriesApi.js
var require_HeartRateIntradayTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/HeartRateIntradayTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.HeartRateIntradayTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getHeartByDateIntraday = function(_date, detailLevel, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getHeartByDateIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateIntraday");
          }
          var pathParams = {
            "date": _date,
            "detail-level": detailLevel
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{date}/1d/{detail-level}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getHeartByDateRangeIntraday = function(_date, endDate, detailLevel, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getHeartByDateRangeIntraday");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRangeIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateRangeIntraday");
          }
          var pathParams = {
            "date": _date,
            "end-date": endDate,
            "detail-level": detailLevel
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{date}/{end-date}/{detail-level}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getHeartByDateRangeTimestampIntraday = function(_date, endDate, detailLevel, startTime, endTime, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getHeartByDateRangeTimestampIntraday");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRangeTimestampIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateRangeTimestampIntraday");
          }
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling getHeartByDateRangeTimestampIntraday");
          }
          if (endTime === void 0 || endTime === null) {
            throw new Error("Missing the required parameter 'endTime' when calling getHeartByDateRangeTimestampIntraday");
          }
          var pathParams = {
            "date": _date,
            "end-date": endDate,
            "detail-level": detailLevel,
            "start-time": startTime,
            "end-time": endTime
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{date}/{end-date}/{detail-level}/time/{start-time}/{end-time}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getHeartByDateTimestampIntraday = function(_date, detailLevel, startTime, endTime, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getHeartByDateTimestampIntraday");
          }
          if (detailLevel === void 0 || detailLevel === null) {
            throw new Error("Missing the required parameter 'detailLevel' when calling getHeartByDateTimestampIntraday");
          }
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling getHeartByDateTimestampIntraday");
          }
          if (endTime === void 0 || endTime === null) {
            throw new Error("Missing the required parameter 'endTime' when calling getHeartByDateTimestampIntraday");
          }
          var pathParams = {
            "date": _date,
            "detail-level": detailLevel,
            "start-time": startTime,
            "end-time": endTime
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{date}/1d/{detail-level}/time/{start-time}/{end-time}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/HeartRateTimeSeriesApi.js
var require_HeartRateTimeSeriesApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/HeartRateTimeSeriesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.HeartRateTimeSeriesApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getHeartByDatePeriod = function(_date, period, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getHeartByDatePeriod");
          }
          if (period === void 0 || period === null) {
            throw new Error("Missing the required parameter 'period' when calling getHeartByDatePeriod");
          }
          var pathParams = {
            "date": _date,
            "period": period
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{date}/{period}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getHeartByDateRange = function(baseDate, endDate, callback) {
          var postBody = null;
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getHeartByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getHeartByDateRange");
          }
          var pathParams = {
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/activities/heart/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/SleepApi.js
var require_SleepApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/SleepApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.SleepApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addSleep = function(startTime, duration, _date, callback) {
          var postBody = null;
          if (startTime === void 0 || startTime === null) {
            throw new Error("Missing the required parameter 'startTime' when calling addSleep");
          }
          if (duration === void 0 || duration === null) {
            throw new Error("Missing the required parameter 'duration' when calling addSleep");
          }
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling addSleep");
          }
          var pathParams = {};
          var queryParams = {
            "startTime": startTime,
            "duration": duration,
            "date": _date
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteSleep = function(logId, callback) {
          var postBody = null;
          if (logId === void 0 || logId === null) {
            throw new Error("Missing the required parameter 'logId' when calling deleteSleep");
          }
          var pathParams = {
            "log-id": logId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/{log-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getSleepByDate = function(_date, callback) {
          var postBody = null;
          if (_date === void 0 || _date === null) {
            throw new Error("Missing the required parameter '_date' when calling getSleepByDate");
          }
          var pathParams = {
            "date": _date
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/date/{date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getSleepByDateRange = function(baseDate, endDate, callback) {
          var postBody = null;
          if (baseDate === void 0 || baseDate === null) {
            throw new Error("Missing the required parameter 'baseDate' when calling getSleepByDateRange");
          }
          if (endDate === void 0 || endDate === null) {
            throw new Error("Missing the required parameter 'endDate' when calling getSleepByDateRange");
          }
          var pathParams = {
            "base-date": baseDate,
            "end-date": endDate
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/date/{base-date}/{end-date}.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getSleepGoal = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/goal.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getSleepList = function(sort, offset, limit, opts, callback) {
          opts = opts || {};
          var postBody = null;
          if (sort === void 0 || sort === null) {
            throw new Error("Missing the required parameter 'sort' when calling getSleepList");
          }
          if (offset === void 0 || offset === null) {
            throw new Error("Missing the required parameter 'offset' when calling getSleepList");
          }
          if (limit === void 0 || limit === null) {
            throw new Error("Missing the required parameter 'limit' when calling getSleepList");
          }
          var pathParams = {};
          var queryParams = {
            "beforeDate": opts["beforeDate"],
            "afterDate": opts["afterDate"],
            "sort": sort,
            "offset": offset,
            "limit": limit
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/list.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateSleepGoal = function(minDuration, callback) {
          var postBody = null;
          if (minDuration === void 0 || minDuration === null) {
            throw new Error("Missing the required parameter 'minDuration' when calling updateSleepGoal");
          }
          var pathParams = {};
          var queryParams = {
            "minDuration": minDuration
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1.2/user/-/sleep/goal.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/SubscriptionsApi.js
var require_SubscriptionsApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/SubscriptionsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.SubscriptionsApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addSubscriptions = function(collectionPath, subscriptionId, callback) {
          var postBody = null;
          if (collectionPath === void 0 || collectionPath === null) {
            throw new Error("Missing the required parameter 'collectionPath' when calling addSubscriptions");
          }
          if (subscriptionId === void 0 || subscriptionId === null) {
            throw new Error("Missing the required parameter 'subscriptionId' when calling addSubscriptions");
          }
          var pathParams = {
            "collection-path": collectionPath,
            "subscription-id": subscriptionId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.deleteSubscriptions = function(collectionPath, subscriptionId, callback) {
          var postBody = null;
          if (collectionPath === void 0 || collectionPath === null) {
            throw new Error("Missing the required parameter 'collectionPath' when calling deleteSubscriptions");
          }
          if (subscriptionId === void 0 || subscriptionId === null) {
            throw new Error("Missing the required parameter 'subscriptionId' when calling deleteSubscriptions");
          }
          var pathParams = {
            "collection-path": collectionPath,
            "subscription-id": subscriptionId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/{collection-path}/apiSubscriptions/{subscription-id}.json",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getSubscriptionsList = function(collectionPath, callback) {
          var postBody = null;
          if (collectionPath === void 0 || collectionPath === null) {
            throw new Error("Missing the required parameter 'collectionPath' when calling getSubscriptionsList");
          }
          var pathParams = {
            "collection-path": collectionPath
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/{collection-path}/apiSubscriptions.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/api/UserApi.js
var require_UserApi = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/api/UserApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.FitbitWebApi) {
          root.FitbitWebApi = {};
        }
        root.FitbitWebApi.UserApi = factory(root.FitbitWebApi.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getBadges = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/badges.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.getProfile = function(callback) {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["oauth2"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/profile.json",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
        this.updateProfile = function(opts, callback) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {
            "gender": opts["gender"],
            "birthday": opts["birthday"],
            "height": opts["height"],
            "aboutMe": opts["aboutMe"],
            "fullname": opts["fullname"],
            "country": opts["country"],
            "state": opts["state"],
            "city": opts["city"],
            "strideLengthWalking": opts["strideLengthWalking"],
            "strideLengthRunning": opts["strideLengthRunning"],
            "weightUnit": opts["weightUnit"],
            "heightUnit": opts["heightUnit"],
            "waterUnit": opts["waterUnit"],
            "glucoseUnit": opts["glucoseUnit"],
            "timezone": opts["timezone"],
            "foodsLocale": opts["foodsLocale"],
            "locale": opts["locale"],
            "localeLang": opts["localeLang"],
            "localeCountry": opts["localeCountry"],
            "startDayOfWeek": opts["startDayOfWeek"]
          };
          var authNames = ["oauth2"];
          var contentTypes = ["multipart/form-data"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/1/user/-/profile.json",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType,
            callback
          );
        };
      };
      return exports2;
    });
  }
});

// node_modules/@researchable/fitbit-web-api/src/index.js
var require_src = __commonJS({
  "node_modules/@researchable/fitbit-web-api/src/index.js"(exports, module) {
    (function(factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "api/ActivityApi", "api/ActivityIntradayTimeSeriesApi", "api/ActivityTimeSeriesApi", "api/AuthApi", "api/BodyAndWeightApi", "api/BodyAndWeightTimeSeriesApi", "api/DevicesApi", "api/FoodAndWaterApi", "api/FoodAndWaterTimeSeriesApi", "api/FriendsApi", "api/HeartRateIntradayTimeSeriesApi", "api/HeartRateTimeSeriesApi", "api/SleepApi", "api/SubscriptionsApi", "api/UserApi"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_ActivityApi(), require_ActivityIntradayTimeSeriesApi(), require_ActivityTimeSeriesApi(), require_AuthApi(), require_BodyAndWeightApi(), require_BodyAndWeightTimeSeriesApi(), require_DevicesApi(), require_FoodAndWaterApi(), require_FoodAndWaterTimeSeriesApi(), require_FriendsApi(), require_HeartRateIntradayTimeSeriesApi(), require_HeartRateTimeSeriesApi(), require_SleepApi(), require_SubscriptionsApi(), require_UserApi());
      }
    })(function(ApiClient, ActivityApi, ActivityIntradayTimeSeriesApi, ActivityTimeSeriesApi, AuthApi, BodyAndWeightApi, BodyAndWeightTimeSeriesApi, DevicesApi, FoodAndWaterApi, FoodAndWaterTimeSeriesApi, FriendsApi, HeartRateIntradayTimeSeriesApi, HeartRateTimeSeriesApi, SleepApi, SubscriptionsApi, UserApi) {
      "use strict";
      var exports2 = {
        /**
         * The ApiClient constructor.
         * @property {module:ApiClient}
         */
        ApiClient,
        /**
         * The ActivityApi service constructor.
         * @property {module:api/ActivityApi}
         */
        ActivityApi,
        /**
         * The ActivityIntradayTimeSeriesApi service constructor.
         * @property {module:api/ActivityIntradayTimeSeriesApi}
         */
        ActivityIntradayTimeSeriesApi,
        /**
         * The ActivityTimeSeriesApi service constructor.
         * @property {module:api/ActivityTimeSeriesApi}
         */
        ActivityTimeSeriesApi,
        /**
         * The AuthApi service constructor.
         * @property {module:api/AuthApi}
         */
        AuthApi,
        /**
         * The BodyAndWeightApi service constructor.
         * @property {module:api/BodyAndWeightApi}
         */
        BodyAndWeightApi,
        /**
         * The BodyAndWeightTimeSeriesApi service constructor.
         * @property {module:api/BodyAndWeightTimeSeriesApi}
         */
        BodyAndWeightTimeSeriesApi,
        /**
         * The DevicesApi service constructor.
         * @property {module:api/DevicesApi}
         */
        DevicesApi,
        /**
         * The FoodAndWaterApi service constructor.
         * @property {module:api/FoodAndWaterApi}
         */
        FoodAndWaterApi,
        /**
         * The FoodAndWaterTimeSeriesApi service constructor.
         * @property {module:api/FoodAndWaterTimeSeriesApi}
         */
        FoodAndWaterTimeSeriesApi,
        /**
         * The FriendsApi service constructor.
         * @property {module:api/FriendsApi}
         */
        FriendsApi,
        /**
         * The HeartRateIntradayTimeSeriesApi service constructor.
         * @property {module:api/HeartRateIntradayTimeSeriesApi}
         */
        HeartRateIntradayTimeSeriesApi,
        /**
         * The HeartRateTimeSeriesApi service constructor.
         * @property {module:api/HeartRateTimeSeriesApi}
         */
        HeartRateTimeSeriesApi,
        /**
         * The SleepApi service constructor.
         * @property {module:api/SleepApi}
         */
        SleepApi,
        /**
         * The SubscriptionsApi service constructor.
         * @property {module:api/SubscriptionsApi}
         */
        SubscriptionsApi,
        /**
         * The UserApi service constructor.
         * @property {module:api/UserApi}
         */
        UserApi
      };
      return exports2;
    });
  }
});
export default require_src();
//# sourceMappingURL=@researchable_fitbit-web-api.js.map
